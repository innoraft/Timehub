<?php

/**
 * @file integrate_github.module file.
 * Module mainly perform the following functions :-
 * 1. Developer and project manager are able to make timesheet
 * entry by commit information during push at github.
 */

/**
 * @desc implements hook_menu().
 * @return $item.
 * array.
 */
function integrate_github_menu() {
  $items = array();

  $items['integrate_github'] = array(
    'page callback' => 'integrate_github',
    'access callback' => TRUE,
    'type' => MENU_NORMAL_ITEM
  );

  return $items;
}

/**
 * @desc Make timesheet entry using commit information.
 * @return String.
 */
function integrate_github() {
  $json = $_POST["payload"]; // To access post JSON data
  //$json = '{"ref":"refs/heads/branch1_timehub","after":"f63cdeefb8837998ca869e2a3a7a6143f3f6ac77","before":"0b195beb4ba3a1f8e2d4da9155fff1405044be6d","created":false,"deleted":false,"forced":false,"compare":"https://github.com/aman4you/Timehub/compare/0b195beb4ba3...f63cdeefb883","commits":[{"id":"f63cdeefb8837998ca869e2a3a7a6143f3f6ac77","distinct":true,"message":"test1 of timesheet entry by push for time taken [t:40m]\n\n[bill:no]\n\nref:innoraft/Timehub/issues/17","timestamp":"2014-03-03T23:02:56-08:00","url":"https://github.com/aman4you/Timehub/commit/f63cdeefb8837998ca869e2a3a7a6143f3f6ac77","author":{"name":"aman","email":"aman.goel2452@gmail.com"},"committer":{"name":"aman","email":"aman.goel2452@gmail.com"},"added":[],"removed":[],"modified":["sites/all/modules/custom_modules/integrate_github/integrate_github.module"]}],"head_commit":{"id":"f63cdeefb8837998ca869e2a3a7a6143f3f6ac77","distinct":true,"message":"test1 of timesheet entry by push for time taken [t:40m]\n\n[bill:no]\n\nref:innoraft/Timehub/issues/17","timestamp":"2014-03-03T23:02:56-08:00","url":"https://github.com/aman4you/Timehub/commit/f63cdeefb8837998ca869e2a3a7a6143f3f6ac77","author":{"name":"aman","email":"aman.goel2452@gmail.com"},"committer":{"name":"aman","email":"aman.goel2452@gmail.com"},"added":[],"removed":[],"modified":["sites/all/modules/custom_modules/integrate_github/integrate_github.module"]},"repository":{"id":13239933,"name":"Timehub","url":"https://github.com/aman4you/Timehub","description":"Timesheet entry to supplement project management on github","watchers":0,"stargazers":0,"forks":0,"fork":true,"size":9183,"owner":{"name":"aman4you","email":"aman.goel@innoraft.com"},"private":false,"open_issues":0,"has_issues":false,"has_downloads":true,"has_wiki":true,"language":"PHP","created_at":1380620476,"pushed_at":1393916735,"master_branch":"master"},"pusher":{"name":"aman4you","email":"aman.goel@innoraft.com"}}';
  $values = json_decode($json);
  $commits = count($values->commits);

  for ($i = 0; $i < $commits; $i++) {
    $project_name = $values->repository->name;
    $description = $values->commits[$i]->message;

    $result = NULL;
    $output = NULL;
    $issue_number = NULL;
    // Fetch issue number from commit message. 
    if (preg_match("/issues\/[0-9]+/i", $values->commits[$i]->message, $output)) {
      if (count($output) == 1) {
        $result = explode('/', $output[0]);
        $issue_number = $result[1];
      }
    }
    elseif (preg_match("/#[0-9]+/i", $values->commits[$i]->message, $output)) {
      if (count($output) == 1) {
        $result = explode('#', $output[0]);
        $issue_number = $result[1];
      }
    }

    $billable = NULL;
    // Fetch billable information from commit message. 
    preg_match("/\[\s*bill\s*:/i", $values->commits[$i]->message, $output);
    if (count($output) == 1) {
      if (preg_match("/\[\s*bill\s*:\s*no\s*\]/i", $values->commits[$i]->message)) {
        $billable = "Not Billable";
      }
      elseif (preg_match("/\[\s*bill\s*:\s*yes\s*\]/i", $values->commits[$i]->message)) {
        $billable = "Billable";
      }
    }
    else {
      $billable = "Not Billable";
    }

    $work_hour = NULL;
    // Fetch work hour from commit message. 
    if (preg_match("/\[\s*t\s*:\s*[0-9]+h\s*\]/i", $values->commits[$i]->message, $output)) {
      if (count($output) == 1) {
        preg_match("/[0-9]+/i", $output[0], $result);

        if ($result[0] < 10) {
          $result[0] = '0' . $result[0];
        }

        $work_hour = $result[0] . ":00";
      }
    }
    elseif (preg_match("/\[\s*t\s*:\s*[0-9]+m\s*\]/i", $values->commits[$i]->message, $output)) {
      if (count($output) == 1) {
        preg_match("/[0-9]+/i", $output[0], $result);

        if ($result[0] < 10) {
          $result[0] = '0' . $result[0];
        }

        $work_hour = "00:" . $result[0];
      }
    }
    elseif (preg_match("/\[\s*t\s*:\s*[0-9]+h:[0-9]+m\s*\]/i", $values->commits[$i]->message, $output)) {
      if (count($output) == 1) {
        $result = explode(':', $output[0]);
        $h = $result[1];
        $m = $result[2];
        $hour = preg_split('/h/i', $h);
        $minute = preg_split('/m/i', $m);

        if ($hour[0] < 10) {
          $hour[0] = '0' . $hour[0];
        }
        if ($minute[0] < 10) {
          $minute[0] = '0' . $minute[0];
        }

        $work_hour = $hour[0] . ':' . $minute[0];
      }
    }

    // Make timesheet entry.
    $node = new stdClass(); // Create a new node object.
    $node->type = "timesheet_entry"; // Or page, or whatever content type you like
    node_object_prepare($node); // Set some default values
    $node->language = LANGUAGE_NONE;

    $node->status = 1; //(1 or 0): published or not
    $node->promote = 1; //(1 or 0): promoted to front page
    $node->comment = 1; // 0 = comments disabled, 1 = read only, 2 = read/write
    $query1 = db_select('users', 'u');
    $query1
        ->fields('u', array('uid', 'mail'))
        ->condition('u.mail', $values->pusher->email);
    $result1 = $query1->execute();
    $value1 = $result1->fetch();
    $flag1 = 0;
    if (!empty($value1)) {
      $node->uid = $value1->uid;
      $flag1 = 1;
    }

    $node->field_issue_number[$node->language][0]['value'] = $issue_number;
    if ($work_hour != NULL) {
      $parts = explode(':', $work_hour);
      $seconds = $parts[0] * 3600 + $parts[1] * 60;
      $node->field_work_hour[$node->language][0]['value'] = $seconds;
    }
    $node->field_billablenot_billable[$node->language][0]['value'] = $billable;
    $node->field_approvednot_approved [$node->language][0]['value'] = "Not Approved";
    $node->field_invoice[$node->language][0]['value'] = "Not Invoice";
    $query2 = db_select('node', 'n');
    $query2
        ->fields('n', array('title', 'nid'))
        ->condition('n.title', $project_name);
    $result2 = $query2->execute();
    $value2 = $result2->fetch();
    $flag2 = 0;
    if (!empty($value2)) {
      $node->field_project_name[$node->language][0]['target_id'] = $value2->nid;
      $flag2 = 1;
    }
    $node->body[$node->language][0]['value'] = $description;
    $node->body[$node->language][0]['format'] = 'filtered_html';
    $date = date("Y-m-d");
    $node->field_date[$node->language][0]['value'] = strtotime($date);
    watchdog('work hour', $work_hour);
    watchdog('issue number', $issue_number);
    watchdog('user', $value1);
    watchdog('project name', $value2);
    if ($work_hour != NULL && $issue_number != NULL && $flag1 == 1 && $flag2 == 1) {
      node_save($node);
    }
  }

  return "Hello";
}
