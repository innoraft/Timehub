<?php

/**
 * @file integrate_github.module file.
 * Module mainly perform the following functions :-
 * 1. Developer and project manager are able to make timesheet
 * entry by commit information during push at github.
 */

/**
 * @desc implements hook_menu().
 * @return $item.
 * array.
 */
function integrate_github_menu() {
  $items = array();

  $items['integrate-github'] = array(
    'page callback' => 'integrate_github',
    'access callback' => TRUE,
    'type' => MENU_NORMAL_ITEM
  );

  return $items;
}

/**
 * @desc Make timesheet entry using commit information.
 * @return String.
 */
function integrate_github() {
  $json = $_POST["payload"]; // To access post JSON data.
  $values = json_decode($json);
  $commits = count($values->commits);

  for ($i = 0; $i < $commits; $i++) {
    if (!preg_match("/\[\s*t\s*:\s*none\s*\]/i", $values->commits[$i]->message)) {
      $project_name = $values->repository->name;
      $description = $values->commits[$i]->message;

      $work_hour = NULL;
      // Fetch work hour from commit message. 
      if (preg_match("/\[\s*t\s*:\s*[0-9]+h\s*\]/i", $values->commits[$i]->message, $output)) {
        if (count($output) == 1) {
          preg_match("/[0-9]+/i", $output[0], $result);

          if ($result[0] < 10) {
            $result[0] = '0' . $result[0];
          }

          $work_hour = $result[0] . ":00";
        }
      }
      elseif (preg_match("/\[\s*t\s*:\s*[0-9]+m\s*\]/i", $values->commits[$i]->message, $output)) {
        if (count($output) == 1) {
          preg_match("/[0-9]+/i", $output[0], $result);

          if ($result[0] < 10) {
            $result[0] = '0' . $result[0];
          }

          $work_hour = "00:" . $result[0];
        }
      }
      elseif (preg_match("/\[\s*t\s*:\s*[0-9]+h:[0-9]+m\s*\]/i", $values->commits[$i]->message, $output)) {
        if (count($output) == 1) {
          $result = explode(':', $output[0]);
          $h = $result[1];
          $m = $result[2];
          $hour = preg_split('/h/i', $h);
          $minute = preg_split('/m/i', $m);

          if ($hour[0] < 10) {
            $hour[0] = '0' . $hour[0];
          }
          if ($minute[0] < 10) {
            $minute[0] = '0' . $minute[0];
          }

          $work_hour = $hour[0] . ':' . $minute[0];
        }
      }

      // If timetaken or none not given in commit than send email.
      if ($work_hour == NULL) {
        $user_info = user_load_by_mail($values->pusher->email);
        $user_name = $user_info->name;
        $message = 'User name ->' . $user_name . '<br /> Email id ->' . $values->pusher->email . '<br /> Project name ->' . $project_name . '<br /> Message ->' . $description;
        $params = array(
          'body' => $message,
          'subject' => 'Timesheet entry commit message wrong format',
        );
        $to = array('mukesh.aggarwal@innoraft.com', 'basant.sharma@innoraft.com', 'sumeet.pareek@innoraft.com', 'aman.goel@innoraft.com');
        drupal_mail('integrate_github', 'mail_info', $to, language_default(), $params, $from = NULL, $send = TRUE);
        break;
      }

      $result = NULL;
      $output = NULL;
      $issue_number = NULL;
      // Fetch issue number from commit message. 
      if (preg_match("/issues\/[0-9]+/i", $values->commits[$i]->message, $output)) {
        if (count($output) == 1) {
          $result = explode('/', $output[0]);
          $issue_number = $result[1];
        }
      }
      elseif (preg_match("/#[0-9]+/i", $values->commits[$i]->message, $output)) {
        if (count($output) == 1) {
          $result = explode('#', $output[0]);
          $issue_number = $result[1];
        }
      }

      $billable = NULL;
      // Fetch billable information from commit message. 
      preg_match("/\[\s*bill\s*:/i", $values->commits[$i]->message, $output);
      if (count($output) == 1) {
        if (preg_match("/\[\s*bill\s*:\s*no\s*\]/i", $values->commits[$i]->message)) {
          $billable = "Not Billable";
        }
        elseif (preg_match("/\[\s*bill\s*:\s*yes\s*\]/i", $values->commits[$i]->message)) {
          $billable = "Billable";
        }
      }
      else {
        $billable = "Not Billable";
      }

      // Make timesheet entry.
      $node = new stdClass(); // Create a new node object.
      $node->type = "timesheet_entry"; // Or page, or whatever content type you like
      node_object_prepare($node); // Set some default values
      $node->language = LANGUAGE_NONE;

      $node->status = 1; //(1 or 0): published or not
      $node->promote = 1; //(1 or 0): promoted to front page
      $node->comment = 1; // 0 = comments disabled, 1 = read only, 2 = read/write
      $user_info = user_load_by_mail($values->pusher->email);
      $flag1 = 0;
      if (!empty($user_info)) {
        $node->uid = $user_info->uid;
        $flag1 = 1;
      }

      $node->field_issue_number[$node->language][0]['value'] = $issue_number;
      if ($work_hour != NULL) {
        $parts = explode(':', $work_hour);
        $seconds = $parts[0] * 3600 + $parts[1] * 60;
        $node->field_work_hour[$node->language][0]['value'] = $seconds;
      }
      $node->field_billablenot_billable[$node->language][0]['value'] = $billable;
      $node->field_approvednot_approved [$node->language][0]['value'] = "Not Approved";
      $node->field_invoice[$node->language][0]['value'] = "Not Invoice";
      $query = new EntityFieldQuery;
      $query->entityCondition('entity_type', 'node')
          ->propertyCondition('title', $project_name);
      $results = $query->execute();
      $flag2 = 0;
      if (!empty($results['node'])) {
        $nids = array_keys($results['node']);
        foreach ($nids as $nid) {
          $node->field_project_name[$node->language][0]['target_id'] = $nid;
        }
        $flag2 = 1;
      }
      $node->body[$node->language][0]['value'] = $description;
      $node->body[$node->language][0]['format'] = 'filtered_html';
      $date = date("Y-m-d");
      $node->field_date[$node->language][0]['value'] = strtotime($date);

      if ($work_hour != NULL && $issue_number != NULL && $flag1 == 1 && $flag2 == 1) {
        node_save($node);
      }
    }
  }

  return "Hello";
}

function integrate_github_mail($key, &$message, $params) {
  switch ($key) {
    case 'mail_info':
      $message['subject'] = $params['subject'];
      $message['body'] = $params['body'];
      break;
  }
}

function integrate_github_mail_alter(&$message) {
  watchdog('mail message', $message);
}