<?php

/**
 * @file attach_form.module file.
 * Module mainly perform the following functions :-
 * 1. Creating Invoice page.
 * 2. Creating Invoice report page.
 * 3. Creating a form to filter timesheet entry to generate invoice.
 */

/**
 * @desc implements hook_menu().
 * @return $item.
 * array.
 */
function attach_form_menu() {
  $items = array();

  $items['create-invoice'] = array(
    'title' => t('Create Invoice'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('attach_form_form'),
    'access callback' => 'page_access',
    'type' => MENU_NORMAL_ITEM
  );

  $items['invoice-report'] = array(
    'title' => t('Invoice Report'),
    'page callback' => 'invoice_report',
    'access callback' => 'page_access',
    'type' => MENU_NORMAL_ITEM
  );

  $items['search-timesheet'] = array(
    'title' => t('Search Timesheet'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('attach_form_form'),
    'access callback' => 'page_access',
    'type' => MENU_NORMAL_ITEM
  );

  $items['search-work-hour'] = array(
    'title' => t('Search Work Hour'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('attach_form_form'),
    'access callback' => 'page_access',
    'type' => MENU_NORMAL_ITEM
  );

  // page argument passed from 'create invoice page' after click submit.
  $items['invoice'] = array(
    'page callback' => 'invoice',
    'page argument' => array(1),
    'access callback' => TRUE,
    'type' => MENU_NORMAL_ITEM
  );

  // page argument passed from 'create invoice page' after click member name.
  $items['desc'] = array(
    'page callback' => 'description',
    'page argument' => array(1),
    'access callback' => TRUE,
    'type' => MENU_NORMAL_ITEM
  );

  return $items;
}

/**
 * @desc page will only access by Project Manager and Administrator.
 * @return boolean.
 */
function page_access() {
  global $user;
  if (in_array('Project Manager', $user->roles) || in_array('administrator', $user->roles)) {
    return TRUE;
  }
  else {
    return FALSE;
  }
}

/**
 * @desc Display timesheet entry at 'invoice report page' according to invoice created till yet.
 * @return theme.
 */
function invoice_report() {
  // Display current date and time at 'invoice page'.
  $dt = new DateTime();
  $date = $dt->format('n.j.Y');
  $time = $dt->format('H:i');
  $datetime = '<span>Date: ' . $date . '</span><span id = "time">Time: ' . $time . '</span>';

  $header = array(array('data' => t('Project Name')), array('data' => t('Issue Number')), array('data' => t('Work Hour')));
  $rows = NULL;

  // Select distinct project name target id for further use.
  $query1 = db_select('field_data_field_project_name', 'pn');
  $query1->fields('pn', array('field_project_name_target_id'))
      ->distinct();
  $result1 = $query1->execute()->fetchAll();

  // Display timesheet entry according to group by project name.
  foreach ($result1 as $value1) {
    $query = new EntityFieldQuery;
    $query->entityCondition('entity_type', 'node')
        ->entityCondition('bundle', 'timesheet_entry')
        ->fieldCondition('field_project_name', 'target_id', $value1->field_project_name_target_id)
        ->fieldCondition('field_invoice', 'value', 'Invoice');
    $results = $query->execute();

    $total = 0;
    if (!empty($results['node'])) {
      $nids = array_keys($results['node']);
      $nodes = node_load_multiple($nids);

      foreach ($nodes as $node) {
        $project_name = node_load($node->field_project_name[$node->language][0]['target_id']);
        $rows[] = array(array('data' => t($project_name->title)), array('data' => t($node->field_issue_number[$node->language][0]['value'])), array('data' => t(secToHM($node->field_work_hour[$node->language][0]['value']))));
        $total += $node->field_work_hour[$node->language][0]['value'];
      }
      $rows[] = array(array('data' => ''), array('data' => ''), array('data' => t('Total = ' . secToHM($total)), 'bgcolor' => '#E6E6FA'));
    }
  }

  return $datetime . theme('table', array('header' => $header, 'rows' => $rows));
}

/**
 * @desc Display hour and minute as two digit.
 * @param $number.
 * number.
 * @return $number.
 * number.
 */
function ensure2Digit($number) {
  if ($number < 10) {
    $number = '0' . $number;
  }
  return $number;
}

/**
 * @desc Convert second to hour:minute format.
 * @param $sec.
 * number.
 * @return $number.
 * number.
 */
function secToHM($sec) {
  $hour = ensure2Digit(floor($sec / 3600));
  $min = ensure2Digit(floor(($sec % 3600) / 60));
  return "$hour:$min";
}

/**
 * @desc Display timesheet entry at 'invoice page' according to 'invoice' checked at 'create invoice page'.
 * @param $values.
 * initialize with null.
 * @return theme.
 */
function invoice($values = '') {
  // Display current date and time at 'invoice page'.
  $dt = new DateTime();
  $date = $dt->format('n.j.Y');
  $time = $dt->format('H:i');
  $datetime = '<span>Date: ' . $date . '</span><span id = "time">Time: ' . $time . '</span>';

  $header = array(array('data' => t('Project Name')), array('data' => t('Issue Number')), array('data' => t('Work Hour')));
  $rows = NULL;
  $nids = explode(',', $values);
  $nodes1 = node_load_multiple($nids);

  // Select distinct project name with related nids for further use.
  $arr = array();
  foreach ($nodes1 as $node1) {
    $project_name = node_load($node1->field_project_name[$node1->language][0]['target_id']);
    $arr[$project_name->title][] = $node1->nid;
  }

  // Display timesheet entry according to group by project name.
  foreach ($arr as $ar) {
    $total = 0;
    $nodes2 = node_load_multiple($ar);
    foreach ($nodes2 as $node2) {
      $project_name = node_load($node2->field_project_name[$node2->language][0]['target_id']);
      $rows[] = array(array('data' => t($project_name->title)), array('data' => t($node2->field_issue_number[$node2->language][0]['value'])), array('data' => t(secToHM($node2->field_work_hour[$node2->language][0]['value']))));
      $total += $node2->field_work_hour[$node2->language][0]['value'];
    }
    $rows[] = array(array('data' => ''), array('data' => ''), array('data' => t('Total = ' . secToHM($total)), 'bgcolor' => '#E6E6FA'));
  }
  return $datetime . theme('table', array('header' => $header, 'rows' => $rows));
}

/**
 * @desc Display description of timesheet entry.
 * @param $values.
 * initialize with null.
 * @return $description.
 * string.
 */
function description($values = '') {
  $node = node_load($values);
  if (!isset($node->body[$node->language][0]['value'])) {
    $description = '';
  }
  else {
    $description = $node->body[$node->language][0]['value'];
  }
  return $description;
}

/**
 * @desc Display 'create invoice page'.
 * @param $form.
 * @param $form_state.
 * @return $form.
 * array.
 */
function attach_form_form($form, &$form_state) {
  $url = request_path();
  $form = array();

  if ($url == 'create-invoice' || $url == 'search-work-hour') {
    $query = new EntityFieldQuery;
    $query->entityCondition('entity_type', 'node')
        ->propertyCondition('type', 'project_entry');
    $result = $query->execute();

    $projects = array();
    $projects[NULL] = '-Any-';
    if (!empty($result['node'])) {
      $nids = array_keys($result['node']);
      $nodes = node_load_multiple($nids);

      foreach ($nodes as $node) {
        $projects[$node->nid] = $node->title;
      }
    }
    $form['projects'] = array(
      '#type' => 'select',
      '#title' => t('Project Name'),
      '#multiple' => TRUE,
      '#options' => $projects
    );
  }

  // Only Developer and Project Manager names mentioned at 'member exposed filter' of 'search view'.
  $members = array();
  $members[NULL] = '-Any-';

  $users = entity_load('user');
  foreach ($users as $user) {
    foreach ($user->roles as $value) {
      if ($value == 'Project Manager' || $value == 'Developer') {
        // Assign user name to array with value and key for select list.
        $members[$user->uid] = $user->name;
      }
    }
  }

  $form['members'] = array(
    '#type' => 'select',
    '#title' => t('Members'),
    '#multiple' => TRUE,
    '#options' => $members,
  );

  if ($url == 'create-invoice') {
    $form['issues'] = array(
      '#type' => 'textfield',
      '#title' => t('Issue Number')
    );
  }

  $form['billable'] = array(
    '#type' => 'select',
    '#title' => t('Billable/Not Billable'),
    '#options' => array(NULL => '-Any-', 'Billable' => 'Billable', 'Not Billable' => 'Not Billable')
  );

  $form['start'] = array(
    '#type' => 'date_popup',
    '#title' => t('Start Date'),
    '#date_format' => 'Y-m-d',
    '#date_year_range' => '-3:+3'
  );

  $form['end'] = array(
    '#type' => 'date_popup',
    '#title' => t('End Date'),
    '#date_format' => 'Y-m-d',
    '#date_year_range' => '-3:+3'
  );

  $form['apply'] = array(
    '#type' => 'button',
    '#value' => 'Apply'
  );

  return $form;
}

/**
 * @desc implements hook_form_alter().
 * @param $form.
 * @param $form_state.
 * @param $form_id.
 * @return.
 */
function attach_form_form_alter(&$form, &$form_state, $form_id) {
  global $user;
  global $base_url;
  $url = request_path();

  drupal_add_css(drupal_get_path('module', 'attach_view') . '/attach_view.css');

  // Alter 'create invoice page' to display timesheet entry.
  if ($form_id == 'attach_form_form') {
    if ($url == 'create-invoice') {
      if (in_array("Project Manager", $user->roles) || in_array("administrator", $user->roles)) {
        $header = array(array('data' => t('Project Name')), array('data' => t('Issue Number')), array('data' => t('Work Hour')), array('data' => t('Member')), array('data' => t('Date')));
        $rows = NULL;

        // Check either project name select with 'select list' or not.
        $project = 0;
        if (isset($form_state['values']['projects'])) {
          foreach ($form_state['values']['projects'] as $value1) {
            if ($value1 != NULL) {
              $project = 1;
            }
          }
        }

        // Check either Billable/Not Billable select with 'select list' or not.
        $billable = NULL;
        if (isset($form_state['values']['billable'])) {
          $billable = $form_state['values']['billable'];
        }

        // Check either member select with 'select list' or not.
        $member = 0;
        if (isset($form_state['values']['members'])) {
          foreach ($form_state['values']['members'] as $value2) {
            if ($value2 != NULL) {
              $member = 1;
            }
          }
        }

        // Check either issue number given to 'text field' or not.
        $issues = NULL;
        if (isset($form_state['values']['issues'])) {
          if ($form_state['values']['issues'] != NULL) {
            $str = $form_state['values']['issues'];
            $issues = explode(',', $str);
          }
        }

        // Check either Start and End date given to 'text field' or not.
        $start = NULL;
        $end = NULL;
        if (isset($form_state['values']['start'])) {
          $start = strtotime($form_state['values']['start']);
        }
        if (isset($form_state['values']['end'])) {
          $end = strtotime($form_state['values']['end']);
        }

        // Select node nids according to project name,Start & End date,billable/not billable,member and issue number.
        $query = new EntityFieldQuery;
        $query->entityCondition('entity_type', 'node')
            ->entityCondition('bundle', 'timesheet_entry');
        if ($member == 1) {
          $query->propertyCondition('uid', $form_state['values']['members'], 'IN');
        }
        $query->fieldCondition('field_invoice', 'value', 'Not Invoice');
        $query->fieldCondition('field_approvednot_approved', 'value', 'Approved');
        if ($issues != NULL) {
          $query->fieldCondition('field_issue_number', 'value', $issues);
        }
        if ($billable != NULL) {
          $query->fieldCondition('field_billablenot_billable', 'value', $billable);
        }
        if ($project == 1) {
          $query->fieldCondition('field_project_name', 'target_id', $form_state['values']['projects'], 'IN');
        }
        if ($start != NULL && $end != NULL) {
          // Check either Start Date less than End Date or not.
          if ($end - $start > 0) {
            $startend = array('start' => $start, 'end' => $end);
            $query->fieldCondition('field_date', 'value', array($startend['start'], $startend['end']), 'BETWEEN');
          }
          else {
            drupal_set_message('Start Date must be less than End Date');
            $form_state['input']['start'] = NULL;
            $form_state['input']['end'] = NULL;
            return;
          }
        }
        elseif ($start == NULL && $end != NULL) {
          $query->fieldCondition('field_date', 'value', $end, '<=');
        }
        elseif ($start != NULL && $end == NULL) {
          $query->fieldCondition('field_date', 'value', $start, '>=');
        }
        $results = $query->execute();

        if (!empty($results['node'])) {
          $nids = array_keys($results['node']);
          $nodes = node_load_multiple($nids);

          // Display timesheet entry at 'create invoice page'.
          foreach ($nodes as $node) {
            $project_name = node_load($node->field_project_name[$node->language][0]['target_id']);
            $rows[$node->nid] = array(array('data' => t($project_name->title)), array('data' => t($node->field_issue_number[$node->language][0]['value'])), array('data' => t(secToHM($node->field_work_hour[$node->language][0]['value']))), array('data' => t('<a href=' . $base_url . '/desc/' . $node->nid . ' target="_blank">' . $node->name . '</a>')), array('data' => t(date('Y-m-d', $node->field_date[$node->language][0]['value']))));
          }
          $form['data'] = array(
            '#type' => 'tableselect',
            '#header' => $header,
            '#options' => $rows
          );
          $form['submit'] = array(
            '#type' => 'submit',
            '#value' => 'Create',
            '#submit' => array('submit_invoice')
          );
        }
        else {
          $form['submit']['#type'] = FALSE;
        }
      }
    }
    if ($url == 'search-timesheet') {
      if (in_array("Project Manager", $user->roles) || in_array("administrator", $user->roles)) {
        $header = array(array('data' => t('Project Name')), array('data' => t('Issue Number')), array('data' => t('Member')), array('data' => t('Date')), array('data' => t('Work Hour')));
        $rows = NULL;

        // Check either Billable/Not Billable select with 'select list' or not.
        $billable = NULL;
        if (isset($form_state['values']['billable'])) {
          $billable = $form_state['values']['billable'];
        }

        // Check either member select with 'select list' or not.
        $member = 0;
        if (isset($form_state['values']['members'])) {
          foreach ($form_state['values']['members'] as $value2) {
            if ($value2 != NULL) {
              $member = 1;
            }
          }
        }

        // Check either Start and End date given to 'text field' or not.
        $start = NULL;
        $end = NULL;
        if (isset($form_state['values']['start'])) {
          $start = strtotime($form_state['values']['start']);
        }
        if (isset($form_state['values']['end'])) {
          $end = strtotime($form_state['values']['end']);
        }

        // Select node nids according to project name,Start & End date,billable/not billable,member and issue number.
        $query = new EntityFieldQuery;
        $query->entityCondition('entity_type', 'node')
            ->entityCondition('bundle', 'timesheet_entry');
        if ($member == 1) {
          $query->propertyCondition('uid', $form_state['values']['members'], 'IN');
        }
        $query->fieldCondition('field_invoice', 'value', 'Not Invoice');
        $query->fieldCondition('field_approvednot_approved', 'value', 'Approved');
        if ($billable != NULL) {
          $query->fieldCondition('field_billablenot_billable', 'value', $billable);
        }
        if ($start != NULL && $end != NULL) {
          // Check either Start Date less than End Date or not.
          if ($end - $start > 0) {
            $startend = array('start' => $start, 'end' => $end);
            $query->fieldCondition('field_date', 'value', array($startend['start'], $startend['end']), 'BETWEEN');
          }
          else {
            drupal_set_message('Start Date must be less than End Date');
            $form_state['input']['start'] = NULL;
            $form_state['input']['end'] = NULL;
            return;
          }
        }
        elseif ($start == NULL && $end != NULL) {
          $query->fieldCondition('field_date', 'value', $end, '<=');
        }
        elseif ($start != NULL && $end == NULL) {
          $query->fieldCondition('field_date', 'value', $start, '>=');
        }
        $results = $query->execute();

        if (!empty($results['node'])) {
          $nids = array_keys($results['node']);
          $nodes = node_load_multiple($nids);

          // Group by date and member.
          if (($start != NULL || $end != NULL) && $member == 1) {
            foreach ($nodes as $node) {
              $dates[] = $node->field_date['und'][0]['value'];
            }
            $unique_dates = array_unique($dates);
            foreach ($unique_dates as $unique_date) {
              $rows[] = array(array('data' => t(date('y-m-d', $unique_date))), array('data' => ''), array('data' => ''), array('data' => ''), array('data' => ''));
              foreach ($nodes as $node) {
                if ($node->field_date['und'][0]['value'] == $unique_date) {
                  $unique_date_nodes[] = $node;
                }
              }
              foreach ($unique_date_nodes as $unique_date_node) {
                $users[] = $unique_date_node->uid;
              }
              $unique_date_unique_users = array_unique($users);
              unset($users);
              foreach ($unique_date_unique_users as $unique_date_unique_user) {
                foreach ($unique_date_nodes as $unique_date_node) {
                  if ($unique_date_node->uid == $unique_date_unique_user) {
                    $unique_date_unique_user_nodes[] = $unique_date_node;
                  }
                }
                $total = 0;
                $billabled = 0;
                $Not_Billabled = 0;
                foreach ($unique_date_unique_user_nodes as $unique_date_unique_user_node) {
                  if ($unique_date_unique_user_node->field_billablenot_billable['und'][0]['value'] == 'Billable') {
                    $billabled++;
                  }
                  else {
                    $Not_Billabled++;
                  }
                  $project_name = node_load($unique_date_unique_user_node->field_project_name[$unique_date_unique_user_node->language][0]['target_id']);
                  $rows[] = array(array('data' => t($project_name->title)), array('data' => t($unique_date_unique_user_node->field_issue_number[$unique_date_unique_user_node->language][0]['value'])), array('data' => t('<a href=' . $base_url . '/desc/' . $unique_date_unique_user_node->nid . ' target="_blank">' . $unique_date_unique_user_node->name . '</a>')), array('data' => t(date('Y-m-d', $unique_date_unique_user_node->field_date[$unique_date_unique_user_node->language][0]['value']))), array('data' => t(secToHM($unique_date_unique_user_node->field_work_hour[$unique_date_unique_user_node->language][0]['value']))));
                  $total += $unique_date_unique_user_node->field_work_hour[$node->language][0]['value'];
                }
                $rows[] = array(array('data' => ''), array('data' => ''), array('data' => 'Billable = ' . $billabled), array('data' => 'Not Billable = ' . $Not_Billabled), array('data' => t('Total = ' . secToHM($total)), 'bgcolor' => '#E6E6FA'));
                unset($unique_date_unique_user_nodes);
              }
              unset($unique_date_nodes);
            }
          } // Group by date.
          elseif ($start != NULL || $end != NULL) {
            foreach ($nodes as $node) {
              $dates[] = $node->field_date['und'][0]['value'];
            }
            $unique_dates = array_unique($dates);

            foreach ($unique_dates as $unique_date) {
              $rows[] = array(array('data' => t(date('y-m-d', $unique_date))), array('data' => ''), array('data' => ''), array('data' => ''), array('data' => ''));
              foreach ($nodes as $node) {
                if ($node->field_date['und'][0]['value'] == $unique_date) {
                  $unique_date_nodes[] = $node;
                }
              }
              $total = 0;
              $billabled = 0;
              $Not_Billabled = 0;
              foreach ($unique_date_nodes as $unique_date_node) {
                if ($unique_date_node->field_billablenot_billable['und'][0]['value'] == 'Billable') {
                  $billabled++;
                }
                else {
                  $Not_Billabled++;
                }
                $project_name = node_load($unique_date_node->field_project_name[$unique_date_node->language][0]['target_id']);
                $rows[] = array(array('data' => t($project_name->title)), array('data' => t($unique_date_node->field_issue_number[$unique_date_node->language][0]['value'])), array('data' => t('<a href=' . $base_url . '/desc/' . $unique_date_node->nid . ' target="_blank">' . $unique_date_node->name . '</a>')), array('data' => t(date('Y-m-d', $unique_date_node->field_date[$unique_date_node->language][0]['value']))), array('data' => t(secToHM($unique_date_node->field_work_hour[$unique_date_node->language][0]['value']))));
                $total += $unique_date_node->field_work_hour[$node->language][0]['value'];
              }
              $rows[] = array(array('data' => ''), array('data' => ''), array('data' => 'Billable = ' . $billabled), array('data' => 'Not Billable = ' . $Not_Billabled), array('data' => t('Total = ' . secToHM($total)), 'bgcolor' => '#E6E6FA'));
              unset($unique_date_nodes);
            }
          } // Group by member.
          elseif ($member == 1) {
            foreach ($nodes as $node) {
              $members[] = $node->uid;
            }
            $unique_members = array_unique($members);

            foreach ($unique_members as $unique_member) {
              foreach ($nodes as $node) {
                if ($node->uid == $unique_member) {
                  $unique_member_nodes[] = $node;
                }
              }
              $total = 0;
              $billabled = 0;
              $Not_Billabled = 0;
              foreach ($unique_member_nodes as $unique_member_node) {
                if ($unique_member_node->field_billablenot_billable['und'][0]['value'] == 'Billable') {
                  $billabled++;
                }
                else {
                  $Not_Billabled++;
                }
                $project_name = node_load($unique_member_node->field_project_name[$unique_member_node->language][0]['target_id']);
                $rows[] = array(array('data' => t($project_name->title)), array('data' => t($unique_member_node->field_issue_number[$unique_member_node->language][0]['value'])), array('data' => t('<a href=' . $base_url . '/desc/' . $unique_member_node->nid . ' target="_blank">' . $unique_member_node->name . '</a>')), array('data' => t(date('Y-m-d', $unique_member_node->field_date[$unique_member_node->language][0]['value']))), array('data' => t(secToHM($unique_member_node->field_work_hour[$unique_member_node->language][0]['value']))));
                $total += $unique_member_node->field_work_hour[$node->language][0]['value'];
              }
              $rows[] = array(array('data' => ''), array('data' => ''), array('data' => 'Billable = ' . $billabled), array('data' => 'Not Billable = ' . $Not_Billabled), array('data' => t('Total = ' . secToHM($total)), 'bgcolor' => '#E6E6FA'));
              unset($unique_member_nodes);
            }
          }
          else {
            foreach ($nodes as $node) {
              $project_name = node_load($node->field_project_name[$node->language][0]['target_id']);
              $rows[] = array(array('data' => t($project_name->title)), array('data' => t($node->field_issue_number[$node->language][0]['value'])), array('data' => t('<a href=' . $base_url . '/desc/' . $node->nid . ' target="_blank">' . $node->name . '</a>')), array('data' => t(date('Y-m-d', $node->field_date[$node->language][0]['value']))), array('data' => t(secToHM($node->field_work_hour[$node->language][0]['value']))));
            }
          }

          $form['data'] = array(
            '#markup' => theme('table', array('header' => $header, 'rows' => $rows))
          );
        }
      }
    }
    if ($url == 'search-work-hour') {
      if (in_array("Project Manager", $user->roles) || in_array("administrator", $user->roles)) {

        // Check either project name select with 'select list' or not.
        $project = 0;
        if (isset($form_state['values']['projects'])) {
          foreach ($form_state['values']['projects'] as $value1) {
            if ($value1 != NULL) {
              $project = 1;
            }
          }
        }

        // Check either Billable/Not Billable select with 'select list' or not.
        $billable = NULL;
        if (isset($form_state['values']['billable'])) {
          $billable = $form_state['values']['billable'];
        }

        // Check either member select with 'select list' or not.
        $member = 0;
        if (isset($form_state['values']['members'])) {
          foreach ($form_state['values']['members'] as $value2) {
            if ($value2 != NULL) {
              $member = 1;
            }
          }
        }

        // Check either Start and End date given to 'text field' or not.
        $start = NULL;
        $end = NULL;
        if (isset($form_state['values']['start'])) {
          $start = strtotime($form_state['values']['start']);
        }
        if (isset($form_state['values']['end'])) {
          $end = strtotime($form_state['values']['end']);
        }

        // Select node nids according to project name,Start & End date,billable/not billable,member and issue number.
        $query = new EntityFieldQuery;
        $query->entityCondition('entity_type', 'node')
            ->entityCondition('bundle', 'timesheet_entry');
        if ($member == 1) {
          $query->propertyCondition('uid', $form_state['values']['members'], 'IN');
        }
        $query->fieldCondition('field_invoice', 'value', 'Not Invoice');
        $query->fieldCondition('field_approvednot_approved', 'value', 'Approved');
        if ($billable != NULL) {
          $query->fieldCondition('field_billablenot_billable', 'value', $billable);
        }
        if ($project == 1) {
          $query->fieldCondition('field_project_name', 'target_id', $form_state['values']['projects'], 'IN');
        }
        if ($start != NULL && $end != NULL) {
          // Check either Start Date less than End Date or not.
          if ($end - $start > 0) {
            $startend = array('start' => $start, 'end' => $end);
            $query->fieldCondition('field_date', 'value', array($startend['start'], $startend['end']), 'BETWEEN');
          }
          else {
            drupal_set_message('Start Date must be less than End Date');
            $form_state['input']['start'] = NULL;
            $form_state['input']['end'] = NULL;
            return;
          }
        }
        elseif ($start == NULL && $end != NULL) {
          $query->fieldCondition('field_date', 'value', $end, '<=');
        }
        elseif ($start != NULL && $end == NULL) {
          $query->fieldCondition('field_date', 'value', $start, '>=');
        }
        $results = $query->execute();

        if (!empty($results['node'])) {
          $nids = array_keys($results['node']);
          $nodes = node_load_multiple($nids);

          $users_uid = array();
          if (isset($form_state['values']['members'])) {
            if (!in_array(NULL, $form_state['values']['members'])) {
              $users_uid = $form_state['values']['members'];
            }
            else {
              array_shift($form_state['values']['members']);
              $users_uid = $form_state['values']['members'];
            }
          }

          if (!empty($users_uid) && ($start != NULL || $end != NULL)) {
            // Fetch members.
            $header = array();
            $selected_members_count = count($users_uid);
            $selected_member_nodes = user_load_multiple($users_uid);
            foreach ($selected_member_nodes as $selected_member_node) {
              $selected_members_names[] = $selected_member_node->name;
            }
            $header[] = 'Date';
            for ($i = 0; $i < $selected_members_count; $i++) {
              $header[] = $selected_members_names[$i];
            }

            // Fetch date.
            foreach ($nodes as $node) {
              $dates[] = $node->field_date[$node->language][0]['value'];
            }
            $unique_dates = array_unique($dates);
            foreach ($unique_dates as $unique_date) {
              $formatted_dates[] = date('y-m-d', $unique_date);
            }
          }
          elseif (!empty($users_uid)) {
            // Fetch members.
            $header = array();
            $selected_members_count = count($users_uid);
            $selected_member_nodes = user_load_multiple($users_uid);
            foreach ($selected_member_nodes as $selected_member_node) {
              $selected_members_names[] = $selected_member_node->name;
            }
            $header[] = 'Date';
            for ($i = 0; $i < $selected_members_count; $i++) {
              $header[] = $selected_members_names[$i];
            }

            // Fetch date.
            $query = new EntityFieldQuery;
            $query->entityCondition('entity_type', 'node')
                ->entityCondition('bundle', 'timesheet_entry');
            $results = $query->execute();
            $nids = array_keys($results['node']);
            $values = node_load_multiple($nids);
            foreach ($values as $value) {
              $dates[] = $value->field_date[$value->language][0]['value'];
            }
            $unique_dates = array_unique($dates);
            foreach ($unique_dates as $unique_date) {
              $formatted_dates[] = date('y-m-d', $unique_date);
            }
          }
          elseif ($start != NULL || $end != NULL) {
            // Fetch members.
            $header = array();
            $users = entity_load('user');
            foreach ($users as $value) {
              foreach ($value->roles as $role) {
                if ($role == 'Project Manager' || $role == 'Developer') {
                  $users_uid[$value->uid] = $value->uid;
                }
              }
            }
            $members_count = count($users_uid);
            $member_nodes = user_load_multiple($users_uid);
            foreach ($member_nodes as $member_node) {
              $members_names[] = $member_node->name;
            }
            $header[] = 'Date';
            for ($i = 0; $i < $members_count; $i++) {
              $header[] = $members_names[$i];
            }

            // Fetch date.
            foreach ($nodes as $node) {
              $dates[] = $node->field_date[$node->language][0]['value'];
            }
            $unique_dates = array_unique($dates);
            foreach ($unique_dates as $unique_date) {
              $formatted_dates[] = date('y-m-d', $unique_date);
            }
          }
          else {
            // Fetch members.
            $header = array();
            $users = entity_load('user');
            foreach ($users as $value) {
              foreach ($value->roles as $role) {
                if ($role == 'Project Manager' || $role == 'Developer') {
                  $users_uid[$value->uid] = $value->uid;
                }
              }
            }
            $members_count = count($users_uid);
            $member_nodes = user_load_multiple($users_uid);
            foreach ($member_nodes as $member_node) {
              $members_names[] = $member_node->name;
            }
            $header[] = 'Date';
            for ($i = 0; $i < $members_count; $i++) {
              $header[] = $members_names[$i];
            }

            // Fetch date.
            $query = new EntityFieldQuery;
            $query->entityCondition('entity_type', 'node')
                ->entityCondition('bundle', 'timesheet_entry');
            $results = $query->execute();
            $nids = array_keys($results['node']);
            $values = node_load_multiple($nids);
            foreach ($values as $value) {
              $dates[] = $value->field_date[$value->language][0]['value'];
            }
            $unique_dates = array_unique($dates);
            foreach ($unique_dates as $unique_date) {
              $formatted_dates[] = date('y-m-d', $unique_date);
            }
          }

          // Fetch work hour.
          $formatted_work_hours = array();
          $timestamp_work_hours = array();
          foreach ($formatted_dates as $formatted_date) {
            foreach ($users_uid as $user_uid) {
              $formatted_work_hours[$formatted_date]['Date'] = $formatted_date;
              foreach ($nodes as $node) {
                $timestamp_date = strtotime($formatted_date);
                $node_date = $node->field_date[$node->language][0]['value'];
                if ($node_date == $timestamp_date && $node->uid == $user_uid) {
                  if (!isset($formatted_work_hours[$formatted_date][$user_uid])) {
                    $formatted_work_hours[$formatted_date][$user_uid] = null;
                  }
                  if (!isset($timestamp_work_hours[$formatted_date][$user_uid])) {
                    $timestamp_work_hours[$formatted_date][$user_uid] = null;
                  }
                  $formatted_work_hours[$formatted_date][$user_uid] += $node->field_work_hour['und'][0]['value'];
                  $timestamp_work_hours[$formatted_date][$user_uid] += $node->field_work_hour['und'][0]['value'];
                }
              }
              if (!isset($formatted_work_hours[$formatted_date][$user_uid])) {
                $formatted_work_hours[$formatted_date][$user_uid] = null;
              }
              $formatted_work_hours[$formatted_date][$user_uid] = secToHM($formatted_work_hours[$formatted_date][$user_uid]);
            }
          }

          // Total work hour.
          $timestamp_total_work_hours = array();
          $formatted_total_work_hours = array();
          foreach ($timestamp_work_hours as $timestamp_work_hour) {
            foreach ($users_uid as $member_uid) {
              foreach ($timestamp_work_hour as $uid => $hour) {
                if ($member_uid == $uid) {
                  if (!isset($timestamp_total_work_hours[$member_uid])) {
                    $timestamp_total_work_hours[$member_uid] = null;
                  }
                  $timestamp_total_work_hours[$member_uid] += $hour;
                }
                else {
                  $hour = '00:00';
                  if (!isset($timestamp_total_work_hours[$member_uid])) {
                    $timestamp_total_work_hours[$member_uid] = null;
                  }
                  $timestamp_total_work_hours[$member_uid] += $hour;
                }
              }
            }
          }
          $formatted_total_work_hours[] = array('data' => 'Total Work Hours', 'bgcolor' => '#ASBKFA');
          foreach ($timestamp_total_work_hours as $uid => $timestamp_total_work_hour) {
            $formatted_total_work_hours[$uid] = array('data' => secToHM($timestamp_total_work_hour), 'bgcolor' => '#ASBKFA');
          }

          $formatted_work_hours[] = $formatted_total_work_hours;
          $form['data'] = array(
            '#markup' => theme('table', array('header' => $header, 'rows' => $formatted_work_hours))
          );
        }
      }
    }
  }
}

/**
 * @desc Move to 'invoice page' with nids whom checkbox select.
 * @param $form.
 * @param $form_state.
 */
function submit_invoice($form, &$form_state) {
  $nids = array();
  foreach ($form_state['values']['data'] as $value) {
    // Save invoice and assign nids to create invoice report.
    if ($value != 0) {
      $nids[] = $value;
      $node = node_load($value);
      $node->field_invoice[$node->language][0]['value'] = 'Invoice';
      node_save($node);
    }
  }
  $nid = implode(',', $nids);
  drupal_goto("invoice/" . $nid);
}
